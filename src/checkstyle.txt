Starting audit...
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/GameMap.java:7: Class GameMap should be declared as final. [FinalClass]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/GameMap.java:20:27: Parameter fields should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/GameMap.java:42:28: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:6:19: Parameter lin should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:6:28: Parameter col should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:10:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'getLin' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'getLin' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:13:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'setLin' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'setLin' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:13:24: Parameter lin should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:16:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'getCol' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'getCol' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:19:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'setCol' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'setCol' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:19:24: Parameter col should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:22:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:26:5: Class 'Coords' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Coords' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:26:5: Definition of 'equals()' without corresponding definition of 'hashCode()'. [EqualsHashCode]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:27:27: Parameter other should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/common/Coords.java:34:31: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/Main.java:8:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/Main.java:9:29: Parameter args should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21: Line is longer than 100 characters (found 122). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21:22: Parameter inputPath should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21:40: Parameter outputPath should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21:59: Parameter players should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21:84: Parameter roundsNumber should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:21:102: Parameter bfr should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:29:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'movePlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'movePlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:29:29: Parameter directions should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:36:30: Expression can be simplified. [SimplifyBooleanExpression]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:69:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'applyOvertimeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'applyOvertimeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:77:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'fight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'fight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:77:23: Parameter hero1 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:77:35: Parameter hero2 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:90:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'letHeroesFight' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'letHeroesFight' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:95: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:101:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'displayHeroes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'displayHeroes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameLogic.java:115:5: Class 'GameLogic' looks like designed for extension (can be subclassed), but the method 'runRounds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameLogic' final or making the method 'runRounds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:11:8: Unused import - java.nio.Buffer. [UnusedImports]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:21:28: Parameter inputPath should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:27:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'readData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'readData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:45: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:54:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'getRoundsNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'getRoundsNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:57:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'getPlayers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'getPlayers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/main/GameInputLoader.java:60:5: Class 'GameInputLoader' looks like designed for extension (can be subclassed), but the method 'getBfr' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GameInputLoader' final or making the method 'getBfr' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:12:30: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:12:47: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:12:49: '400' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:13:32: '30' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:17:5: Class 'Wizard' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Wizard' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:18:28: Parameter enemy1 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Wizard.java:18:47: Parameter enemy2 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:12:30: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:12:47: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:12:49: '600' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:13:32: '40' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:17:5: Class 'Rogue' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Rogue' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:18:28: Parameter enemy1 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Rogue.java:18:47: Parameter enemy2 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:3: Using the '.*' form of import should be avoided - players.abilities.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:10:30: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:10:47: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:10:49: '900' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:11:32: '80' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:15:5: Class 'Knight' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Knight' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:16:28: Parameter enemy1 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Knight.java:16:47: Parameter enemy2 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/IHero.java:6:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/IHero.java:7:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:8:19: Name 'HP' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:9:19: Name 'XP' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:12:22: Variable 'type' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:14:16: Variable 'maxHP' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:16:16: Variable 'damageToTake' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:17:18: Variable 'damageToTakeWithoutRaceModif' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:18:16: Variable 'totalDamageToTake' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:19:16: Variable 'damageOverTime' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:20:16: Variable 'roundsOfDamageOverTime' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:21:20: Variable 'stunned' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:22:16: Variable 'roundsOfStun' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:24:23: Variable 'ability1' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:25:23: Variable 'ability2' must be private and have accessor methods. [VisibilityModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:27:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:30:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:30:23: Parameter HP should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:30:27: Name 'HP' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:33:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getXP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getXP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:36:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setXP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setXP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:36:23: Parameter XP should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:36:27: Name 'XP' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:39:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:42:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:42:26: Parameter level should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:45:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'getCoords' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'getCoords' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:48:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'setCoords' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'setCoords' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:48:27: Parameter coords should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:55:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'restoreHP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'restoreHP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:56:30: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:58:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'growXP' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'growXP' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:58:24: Parameter opponentLevel should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:60:32: '200' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:60:69: '40' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:61:13: Name 'XPLevelUp' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:61:25: '250' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:61:44: '50' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:64:26: '50' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:75:5: Class 'Hero' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Hero' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Hero.java:98: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:12:30: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:12:47: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:12:49: '500' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:13:32: '50' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:17:5: Class 'Pyromancer' looks like designed for extension (can be subclassed), but the method 'takeDamage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Pyromancer' final or making the method 'takeDamage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:18:28: Parameter enemy1 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/types/Pyromancer.java:18:47: Parameter enemy2 should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:4:29: Name 'defaultHP' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:5:29: Name 'bonusHPperLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:6:29: Name 'firstBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:7:29: Name 'firstDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:8:29: Name 'secondBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:9:29: Name 'secondDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:10:29: Name 'baseDamagePerRound' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/PyromancerConstants.java:11:29: Name 'damageBonusPerRound' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:4:29: Name 'defaultHP' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:5:29: Name 'bonusHPperLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:6:29: Name 'firstBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:7:29: Name 'firstDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:8:29: Name 'HPprocentLimit' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:9:29: Name 'MaxHPprocentLimit' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:10:29: Name 'secondBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/KnightConstants.java:11:29: Name 'secondDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:4:29: Name 'defaultHP' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:5:29: Name 'bonusHPperLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:6:29: Name 'firstDamageProcent' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:7:29: Name 'firstDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:8:31: Name 'damageHPprocent' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:9:29: Name 'secondDamageProcent' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:10:29: Name 'secondDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/WizardConstants.java:11:29: Name 'maxBonusPerDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:3:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:4:29: Name 'defaultHP' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:5:29: Name 'bonusHPperLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:6:29: Name 'firstBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:7:29: Name 'firstDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:8:31: Name 'coef3Round' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:9:29: Name 'secondBaseDamage' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/constants/RogueConstants.java:10:29: Name 'secondDamageBonusPerLevel' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [ConstantName]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/factory/HeroFactory.java:9: Class HeroFactory should be declared as final. [FinalClass]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/factory/HeroFactory.java:18:28: Parameter type should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:8:21: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:11:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:12:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:13:25: '3' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:14:50: '200' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:14:56: '20' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:14:84: '1.5f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:16:49: '200' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:16:55: '20' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:20:85: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:26:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:27:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:29:84: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:31:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:32:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:34:84: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:36:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:37:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:39:84: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:41:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:42:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:44:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Backstab.java:46:5: Class 'Backstab' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Backstab' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:8:20: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:11:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:12:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:13:45: '200' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:13:51: '30' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:15:85: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:20:36: '20' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:21:23: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:21:30: '0.01f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:23:23: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:23:30: '0.01f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:23:38: '20' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:27:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:28:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:30:84: '1.1f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:35:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:36:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:43:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:44:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:46:84: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:51:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:52:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:54:84: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Execute.java:59:5: Class 'Execute' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Execute' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:7:22: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:10:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:12:45: '350' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:12:51: '50' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:14:85: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:18:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:19:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:21:84: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:23:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:24:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:26:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:28:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:29:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:31:84: '1.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:33:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:34:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:36:84: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Fireblast.java:38:5: Class 'Fireblast' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Fireblast' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:7:22: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:10:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:12:65: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:12:67: '40' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:12:72: '10' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:13:57: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:13:59: '3' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:16:85: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:17:82: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:18:44: '3' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:19:34: '3' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:24:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:25:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:27: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:27:57: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:27:110: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:29:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:30:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:32: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:32:57: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:32:110: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:34:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:35:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:37: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:37:57: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:37:110: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:39:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:40:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:42: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:42:57: Inner assignments should be avoided. [InnerAssignment]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:42:110: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Paralysis.java:44:5: Class 'Paralysis' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Paralysis' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/IHeroDamage.java:3: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/IHeroDamage.java:6:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/IHeroDamage.java:7:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/IHeroDamage.java:8:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/IHeroDamage.java:9:5: Redundant 'public' modifier. [RedundantModifier]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:7:19: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:10:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:12:45: '150' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:12:51: '20' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:13:31: '50' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:13:36: '30' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:19:85: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:20:68: '1.25f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:24:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:25:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:27:84: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:28:72: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:30:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:31:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:33:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:34:72: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:36:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:37:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:39:84: '1.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:40:72: '1.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:42:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:43:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:45:84: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:46:72: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Ignite.java:48:5: Class 'Ignite' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Ignite' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:7:17: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:10:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:12:45: '100' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:12:51: '40' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:14:85: '1.15f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:23:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:24:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:26:84: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:28:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:29:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:31:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:33:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:34:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:36:84: '1.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:38:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:39:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:41:84: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Slam.java:43:5: Class 'Slam' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Slam' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:7:20: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:10:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:13:36: '17' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:14:23: '0.35f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:14:31: '0.02f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:16:23: '0.35f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:16:31: '0.02f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:16:39: '17' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:20:85: '1.1f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:24:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:25:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:27:84: '1.3f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:29:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:30:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:32:84: '1.4f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:34:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:35:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:39:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:40:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:42:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Deflect.java:44:5: Class 'Deflect' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Deflect' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/HeroDamage.java:9:23: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/HeroDamage.java:13:57: 'hero' hides a field. [HiddenField]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/HeroDamage.java:14:5: Class 'HeroDamage' looks like designed for extension (can be subclassed), but the method 'getHeroLevel' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'HeroDamage' final or making the method 'getHeroLevel' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:4: Using the '.*' form of import should be avoided - players.types.*. [AvoidStarImport]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:7:18: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:10:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'setDamageWithoutRaceModif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'setDamageWithoutRaceModif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:11:43: Parameter hero should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:12:25: '0.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:12:32: '0.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:13:33: '0.3f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:13:59: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:16:85: '1.1f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:20:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:21:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:23:84: '0.9f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:25:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:26:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:28:84: '1.2f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:30:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:31:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:33:84: '1.05f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:35:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'launchAttack' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'launchAttack' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:36:30: Parameter opponent should be final. [FinalParameters]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:38:84: '0.8f' is a magic number. [MagicNumber]
[ERROR] /home/marin/work/oop/proiect/code/League-of-OOP/src/players/abilities/Drain.java:40:5: Class 'Drain' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Drain' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 352 errors.
